import requests
from config import tg_bot_token
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
import markups as nav


bot = Bot(token=tg_bot_token,parse_mode='HTML')
dp = Dispatcher(bot)

# –ö–æ–º–∞–Ω–¥—ã + –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, "+message.from_user.first_name + "\n–Ø F1-bot", reply_markup= nav.mainMenu)


@dp.message_handler(Text(equals="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
async def with_puree(message: types.Message):
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await message.answer("–í—ã–±–∏—Ä–∞–π", reply_markup=nav.mainMenu)


@dp.message_handler(Text(equals="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã üèé"))
async def with_puree(message:types.Message):
    if message.text == "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã üèé":
        await message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?", reply_markup=nav.otherMenu)

@dp.message_handler(Text(equals="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–Ω–∫–∏"))
async def with_puree(message: types.Message):
    r = requests.get(
        f"http://ergast.com/api/f1/current/last/results.json"
        )
    data = r.json()['MRData']['RaceTable']['Races'][0]['Results']

    text = "<b>–ü–∏–ª–æ—Ç - –û—á–∫–∏</b>\n\n"
    for driver in data:
        try:
            text += driver['Driver']['familyName'] + " - " + \
                    driver['Points']['points'] + "\n"
        except KeyError:
            try:
                text += driver['Driver']['familyName'] + " - " + \
                        driver['points'] + "\n"
            except Exception:
                pass
    await message.answer(text)

@dp.message_handler(Text(equals="–ß–µ–º–ø–∏–æ–Ω–∞—Ç üèÜ"))
async def with_puree(message: types.Message):
    r = requests.get(
        f"http://ergast.com/api/f1/current/driverStandings.json"
        )
    data = r.json()['MRData']['StandingsTable']['StandingsLists'][0]['DriverStandings']

    text = "<b>–ü–∏–ª–æ—Ç - –û—á–∫–∏</b>\n\n"
    for driver in data:
        try:
            text += driver['Driver']['familyName'] + " - " + \
                    driver['Points']['points'] + "\n"
        except KeyError:
            try:
                text += driver['Driver']['familyName'] + " - " + \
                        driver['points'] + "\n"
            except Exception:
                pass
    if message.text == "–ß–µ–º–ø–∏–æ–Ω–∞—Ç üèÜ":
        await message.answer(text)

@dp.message_handler(Text(equals="–ö—É–±–æ–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤"))
async def with_puree(message: types.Message):
    r = requests.get(
        f"http://ergast.com/api/f1/current/constructorStandings.json"
    )
    data = r.json()["MRData"]["StandingsTable"]["StandingsLists"][0]["ConstructorStandings"]

    text = "<b>–ö–æ–º–∞–Ω–¥–∞ - –û—á–∫–∏</b>\n\n"

    for team in data:
        try:
            text += team["Constructor"]["name"] + " - " + \
                    team['Points']['points'] + "\n"
        except KeyError:
            try:
                text += team["Constructor"]["name"] + " - " + \
                        team['points'] + "\n"
            except Exception:
                pass
    if message.text == "–ö—É–±–æ–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤":
        await message.answer(text)


@dp.message_handler(lambda message: message.text == "–°–ª–µ–¥—É—é—â–∞—è –≥–æ–Ω–∫–∞ ‚û°")
async def without_puree(message: types.Message):
    r = requests.get(
        f"http://ergast.com/api/f1/current/next.json"
    )
    data = r.json()['MRData']['RaceTable']['Races'][0]

    text ="<b>\n–¢—Ä–∞—Å—Å–∞: </b>"+data['raceName']+ "<b>\n–î–∞—Ç–∞: </b>" + data["date"] + "<b>\n–í—Ä–µ–º—è: </b>"+ data["time"].replace("Z","")

    if message.text == "–°–ª–µ–¥—É—é—â–∞—è –≥–æ–Ω–∫–∞ ‚û°":
        await message.answer(text)


#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp)
