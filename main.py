import requests
from aiogram.dispatcher.filters import Text
import logging
from aiogram import Bot, Dispatcher, executor, types
from db import Database
import markups as nav
from config import tg_bot_token, ADMIN_TOKEN

logging.basicConfig(level=logging.INFO)

bot = Bot(token=tg_token_bot)
dp = Dispatcher(bot)
db = Database('database.db')




@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, "+message.from_user.first_name + "\n–Ø F1-bot", reply_markup= nav.mainMenu)

async def start(message: types.Message):
    if message.chat.type == 'private':
        if not db.user_exists(message.from_user.id):
            db.add_user(message.from_user.id)
        await bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å')

@dp.message_handler(Text(equals="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
async def with_puree(message: types.Message):
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await message.answer("–í—ã–±–∏—Ä–∞–π", reply_markup=nav.mainMenu)


@dp.message_handler(Text(equals="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã üèé"))
async def with_puree(message:types.Message):
    if message.text == "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã üèé":
        await message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?", reply_markup=nav.otherMenu)

@dp.message_handler(Text(equals="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–Ω–∫–∏"))
async def with_puree(message: types.Message):
    r = requests.get(
        f"http://ergast.com/api/f1/current/last/results.json"
        )
    data = r.json()['MRData']['RaceTable']['Races'][0]['Results']

    text = "<b>–ü–∏–ª–æ—Ç - –û—á–∫–∏</b>\n\n"
    for driver in data:
        try:
            text += driver['Driver']['familyName'] + " - " + \
                    driver['Points']['points'] + "\n"
        except KeyError:
            try:
                text += driver['Driver']['familyName'] + " - " + \
                        driver['points'] + "\n"
            except Exception:
                pass
    await message.answer(text)

@dp.message_handler(Text(equals="–ß–µ–º–ø–∏–æ–Ω–∞—Ç üèÜ"))
async def with_puree(message: types.Message):
    r = requests.get(
        f"http://ergast.com/api/f1/current/driverStandings.json"
        )
    data = r.json()['MRData']['StandingsTable']['StandingsLists'][0]['DriverStandings']

    text = "<b>–ü–∏–ª–æ—Ç - –û—á–∫–∏</b>\n\n"
    for driver in data:
        try:
            text += driver['Driver']['familyName'] + " - " + \
                    driver['Points']['points'] + "\n"
        except KeyError:
            try:
                text += driver['Driver']['familyName'] + " - " + \
                        driver['points'] + "\n"
            except Exception:
                pass
    if message.text == "–ß–µ–º–ø–∏–æ–Ω–∞—Ç üèÜ":
        await message.answer(text)

@dp.message_handler(Text(equals="–ö—É–±–æ–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤"))
async def with_puree(message: types.Message):
    r = requests.get(
        f"http://ergast.com/api/f1/current/constructorStandings.json"
    )
    data = r.json()["MRData"]["StandingsTable"]["StandingsLists"][0]["ConstructorStandings"]

    text = "<b>–ö–æ–º–∞–Ω–¥–∞ - –û—á–∫–∏</b>\n\n"

    for team in data:
        try:
            text += team["Constructor"]["name"] + " - " + \
                    team['Points']['points'] + "\n"
        except KeyError:
            try:
                text += team["Constructor"]["name"] + " - " + \
                        team['points'] + "\n"
            except Exception:
                pass
    if message.text == "–ö—É–±–æ–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤":
        await message.answer(text)


@dp.message_handler(Text(equals="–ö—É–±–æ–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤"))
async def without_puree(message: types.Message):
    r = requests.get(
        f"http://ergast.com/api/f1/current/next.json"
    )
    data = r.json()['MRData']['RaceTable']['Races'][0]

    text ="<b>\n–¢—Ä–∞—Å—Å–∞: </b>"+data['raceName']+ "<b>\n–î–∞—Ç–∞: </b>" + data["date"] + "<b>\n–í—Ä–µ–º—è: </b>"+ data["time"].replace("Z","")

    if message.text == "–°–ª–µ–¥—É—é—â–∞—è –≥–æ–Ω–∫–∞ ‚û°":
        await message.answer(text)



@dp.message_handler(commands=['admin'])
async def cmd_all(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == ADMIN_TOKEN:
            await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=nav.menuAdmin)
        else:
            await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω!")

@dp.message_handler(Text(equals="–†–∞—Å—Å—ã–ª–∫–∞"))
async def with_puree(message: types.Message):
    await message.answer("–ß—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?")

    @dp.message_handler()
    async def all(message:types.Message):
        if message.chat.type == 'private':
            if message.from_user.id == ADMIN_TOKEN:
                text = message.text
                users = db.get_users()
                for row in users:
                    await bot.send_message(row[0], text)
            await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", reply_markup=nav.menuAdmin)



#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
